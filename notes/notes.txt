from Visual Studio errors:

- TCHAR is wide char so use with std::wstring. and prepend any literal strings with L (if a param is LPCWSTR).

- can't do something like "TCHAR str[someLength]". dynamic sizes are unacceptable. have to use new and delete. (g++ seems to be ok with it though)

- windows.h already pulls in min and max (no need to use std::min/max from <algorithm>)

- don't use std::localtime, use localtime_s instead (got an error about it) - https://stackoverflow.com/questions/38034033/c-localtime-this-function-or-variable-may-be-unsafe

- oddly(?), I had to increase the height of my comboboxes when using widechars in order for all the options to show. wonder if it is because of the widechars?

more resources:
https://stackoverflow.com/questions/37956090/how-to-construct-a-stdstring-with-embedded-values-i-e-string-interpolation
https://stackoverflow.com/questions/22753328/c-error-expression-must-have-integral-or-enum-type-getting-this-from-a-s
https://stackoverflow.com/questions/16605967/set-precision-of-stdto-string-when-converting-floating-point-values (e.g. for saturation value on the parameters page)

TODO:
- rename/replace anywhere gif is used since we won't be dealing with gifs here. maybe change it to captureFrames?
- improve status updates in gui when processing.
- be able to just pick a time duration in seconds to record. (but what to do about frame rate?)

wasapi
https://stackoverflow.com/questions/64318206/record-an-audio-stream-with-wasapi

ffmpeg
https://stackoverflow.com/questions/24961127/how-to-create-a-video-from-images-with-ffmpeg
https://stackoverflow.com/questions/20847674/ffmpeg-libx264-height-not-divisible-by-2
https://superuser.com/questions/704744/video-produced-from-images-only-plays-in-vlc-but-no-other-players
https://stackoverflow.com/questions/46779073/ffmpeg-video-longer-than-audio-after-having-combined-image-and-audio-to-video
https://superuser.com/questions/1647171/ffmpeg-combine-image-audio-into-video-but-output-is-longer-than-the-audio-f

- yuv420 is important for the mp4 to be viewable (for windows at least lol)

// about 8 frames per second when frames were collected with a 120 ms delay between each capture
cd temp_13-08-2022_224758
ffmpeg -framerate 8 -pattern_type glob -i '*.bmp' -i ../WASAPICaptureTimerDriven-{A0574280-0ACE-4770-913B-0A3D7199554D}.wav -shortest -c:v libx264 -r 8 test.mp4


ffmpeg -i screen0.bmp -i screen1.bmp -i screen2.bmp -i screen3.bmp -i screen4.bmp -i screen5.bmp -i screen6.bmp -i screen7.bmp -i screen8.bmp -i screen9.bmp -i screen10.bmp -i screen11.bmp -i screen12.bmp -i screen13.bmp -i screen14.bmp -i ../WASAPICaptureTimerDriven-{2CCA4FBB-299C-46B5-834D-7DCF395911F7}.wav -r 8 test.mp4

ffmpeg -i screen0.bmp -i screen1.bmp -i screen2.bmp -i screen3.bmp -i screen4.bmp -i screen5.bmp -i screen6.bmp -i screen7.bmp -i screen8.bmp -i screen9.bmp -i screen10.bmp -i screen11.bmp -i screen12.bmp -i screen13.bmp -i screen14.bmp -i ../WASAPICaptureTimerDriven-{2CCA4FBB-299C-46B5-834D-7DCF395911F7}.wav -c:v libx264 -pix_fmt yuv420p test.mp4

this works!
ffmpeg -i screen%d.bmp -i ../WASAPICaptureTimerDriven-{2CCA4FBB-299C-46B5-834D-7DCF395911F7}.wav -vf "pad=ceil(iw/2)*2:ceil(ih/2)*2" -c:v libx264 -pix_fmt yuv420p -shortest -r 8 test.mp4

// setting read in framerate can help a lot I think
ffmpeg -framerate 8.3 -i screen%d.bmp -i ../WASAPICaptureTimerDriven-{03F61B14-CEA7-44E4-B147-A87731A7B299}.wav -vf "pad=ceil(iw/2)*2:ceil(ih/2)*2" -c:v libx264 -pix_fmt yuv420p -r 8 test2.mp4
ffmpeg -framerate 8.3 -i ./temp_14-08-2022_092854/screen%d.bmp -i WASAPICaptureTimerDriven-{03F61B14-CEA7-44E4-B147-A87731A7B299}.wav -vf "pad=ceil(iw/2)*2:ceil(ih/2)*2" -c:v libx264 -pix_fmt yuv420p -r 8 test2.mp4


ffmpeg -framerate 8.3 -i ./temp_14-08-2022_183147/screen%d.bmp -i temp_14-08-2022_183147.wav -vf "pad=ceil(iw/2)*2:ceil(ih/2)*2" -c:v libx264 -pix_fmt yuv420p -r 8 testing.mp4